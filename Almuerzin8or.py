import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler


TOKEN = os.environ.get('ALMUERZIN8OR_KEY')

MENU_ITEMS = {
    'ü•É': 0,
    '‚òï': 0,
    'üßÉ': 0,
    'üíß‚Äã': 0,
    'üçÖ': 0,
    'ü•ñ': 0,
    'üêü‚Äã': 0,
    'üê∑': 0,
    'ü•ö': 0,
    'ü•ê': 0,
    'üç´': 0,
    'üßÅ‚Äã':0,
    'ü•™': 0,
    'ü•¨': 0,
}
MENU_TEXT = {
    'ü•É': 'Cortado',
    '‚òï': 'Caf√© con leche',
    'üßÉ': 'Zumo',
    'üíß‚Äã': 'Botella de agua',
    'üçÖ': 'Tostada con tomate',
    'ü•ñ': 'Tostada con aceite',
    'üêü‚Äã': 'Tostada con at√∫n',
    'üê∑': 'Bocadillo de jam√≥n',
    'ü•ö': 'Bocadillo de tortilla',
    'ü•ê': 'Cruas√°n mixto',
    'üç´': 'Cruas√°n nutella',
    'üßÅ‚Äã': 'Bizcocho',
    'ü•™': 'S√°ndwich',
    'ü•¨': 'S√°ndwich vegetal'
}

#M√©todos
def create_action_keyboard():
    keyboard = [[InlineKeyboardButton('‚ûï', callback_data='plus'), InlineKeyboardButton('‚ûñ', callback_data='minus')]]
    return InlineKeyboardMarkup(keyboard)

def create_product_keyboard():
    keyboard = []
    row = []

    for emoji in MENU_ITEMS.keys():
        row.append(InlineKeyboardButton(emoji, callback_data=emoji))
        if len(row) == 2:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton('‚Ü©Ô∏è‚Äã', callback_data='back'), InlineKeyboardButton('‚ùå', callback_data='delete')])

    return InlineKeyboardMarkup(keyboard)

def create_order_summary():
    order_summary = "Tu pedido actual:\n"
    menu = list(MENU_ITEMS.keys())
    for item in menu:
        count = MENU_ITEMS[item]
        if count > 0:
            order_summary += f"{item} {MENU_TEXT.get(item, '')}: {count}\n"
    
    return order_summary

def clean_menu_count():
    for item in MENU_ITEMS:
        MENU_ITEMS[item] = 0

#Comandos
async def start_command(update, context: CallbackContext):
    clean_menu_count()
    await update.message.reply_text(
    '¬°Hola! Soy tu bot de pedidos de almuerzo. Usa /leyenda para ver el men√∫ y /pedido para hacer tu pedido. '
    'Si tienes alguna duda, utiliza /guia para ver c√≥mo funciona el proceso de pedido.')

async def legend_command(update, context: CallbackContext):
    legend = "Aqu√≠ tienes el significado de cada emoticono:\n"
    for emoji, description in MENU_TEXT.items():
        legend += f"{emoji}: {description}\n"
    await update.message.reply_text(legend)

async def guide_command(update, context: CallbackContext):
    await update.message.reply_text(
    'A la hora de empezar tu pedido se te mostrar√°n dos emoticonos:\n'
    '   - Si pulsas ‚ûï, los siguientes productos que selecciones se ir√°n sumando a tu pedido.\n'
    '   - Si pulsas ‚ûñ, los productos que selecciones se ir√°n restando de tu pedido actual.\n\n'
    'Tambi√©n tienes otras opciones importantes:\n'
    '   - ‚Ü©Ô∏è: te permitir√° cambiar entre a√±adir o eliminar productos.\n'
    '   - ‚ùå: borrar√° todo el pedido actual si deseas comenzar desde cero.\n\n'
    '¬°Sigue las instrucciones y disfruta organizando tu pedido!')

async def order_command(update: Update, context: CallbackContext):
    sent_message = await update.message.reply_text(
        text="¬øQu√© deseas hacer?",
        reply_markup=create_action_keyboard()
    )


async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    selected_action = query.data
    order_summary = create_order_summary()

    if selected_action == 'plus' or selected_action == 'minus':
        context.user_data['action'] = selected_action
        await query.edit_message_text(
            text=f"{order_summary}\nElige un producto:",
            reply_markup=create_product_keyboard()
        )
    elif selected_action == 'back':
        await query.edit_message_text(
            text=f"{order_summary}\n¬øQu√© deseas hacer?",
            reply_markup=create_action_keyboard()
        )
    elif selected_action == 'delete':
        # Eliminar todo el pedido
        clean_menu_count()
        order_summary = create_order_summary()  # Actualiza despu√©s de eliminar
        await query.edit_message_text(
            text=f"{order_summary}\nTu pedido ha sido eliminado.\n¬øDeseas hacer algo m√°s?",
            reply_markup=create_action_keyboard()
        )
    elif selected_action in MENU_ITEMS:
        action = context.user_data.get('action')

        if action == 'plus':
            MENU_ITEMS[selected_action] += 1
        elif action == 'minus' and MENU_ITEMS[selected_action] > 0:
            MENU_ITEMS[selected_action] -= 1

        order_summary = create_order_summary()
        await query.edit_message_text(
            text=f"{order_summary}\nElige otro producto o vuelve:",
            reply_markup=create_product_keyboard()
        )


#Ejecuci√≥n
if __name__ == '__main__':
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("leyenda", legend_command))
    application.add_handler(CommandHandler("guia", guide_command))
    application.add_handler(CommandHandler("pedido", order_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.run_polling()
